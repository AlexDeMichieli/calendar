{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/calendar-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Grid from './components/Grid';\nimport SideBar from './components/SideBar';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [month, setMonth] = useState(new Date().getMonth());\n  const [year, setYear] = useState(new Date().getFullYear());\n  const [allDaysOfMonth, setAllDaysOfMonth] = useState([]);\n  const [on, setOn] = useState(false);\n  const [prefillTime, setPrefillTime] = useState({});\n  useEffect(() => {\n    const daysOfMonth = () => {\n      let date = new Date(year, month, 1);\n      let days = [];\n\n      while (date.getMonth() === parseInt(month)) {\n        let day = moment(date).format('L');\n        let splitDate = day.split(\"00\")[0];\n        days.push(splitDate);\n        date.setDate(date.getDate() + 1);\n      }\n\n      setAllDaysOfMonth(days);\n    };\n\n    daysOfMonth(month, year);\n  }, [month, year]);\n\n  const handleOn = () => {\n    setOn(!on);\n  };\n\n  const preFillDates = (begin, end) => {\n    setPrefillTime({\n      \"timeIn\": begin,\n      \"timeOut\": end\n    });\n  };\n\n  const monthsOfYear = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  const yearsToCome = () => {\n    let currentYear = new Date().getFullYear();\n    return [...Array(2050 - currentYear + 1).keys()].map(i => i + currentYear);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOn,\n      style: {\n        width: '100%'\n      },\n      type: \"button\",\n      className: \"btn btn-dark btn-lg btn-block\",\n      children: \"Dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), on && /*#__PURE__*/_jsxDEV(SideBar, {\n      preFillDates: preFillDates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setMonth(e.target.value),\n          className: \"form-select\",\n          \"aria-label\": \"Default select example\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            defaultValue: true,\n            children: \"Select Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), monthsOfYear.map((month, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              name: month,\n              value: index,\n              children: month\n            }, month, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 22\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setYear(e.target.value),\n          className: \"form-select\",\n          \"aria-label\": \"Default select example\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            defaultValue: true,\n            children: \"Select Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), yearsToCome().map(year => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              name: year,\n              value: year,\n              children: year\n            }, year, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 22\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      allDaysOfMonth: allDaysOfMonth,\n      prefillTime: prefillTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"wE2NRshvQzsqBO/nLa03/VC38QQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Grid","SideBar","moment","App","month","setMonth","Date","getMonth","year","setYear","getFullYear","allDaysOfMonth","setAllDaysOfMonth","on","setOn","prefillTime","setPrefillTime","daysOfMonth","date","days","parseInt","day","format","splitDate","split","push","setDate","getDate","handleOn","preFillDates","begin","end","monthsOfYear","yearsToCome","currentYear","Array","keys","map","i","width","e","target","value","index"],"sources":["/Users/alexander/Desktop/calendar-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Grid from './components/Grid';\nimport SideBar from './components/SideBar';\nimport moment from 'moment'\n\nfunction App() {\n  const [month, setMonth] = useState(new Date().getMonth());\n  const [year, setYear] = useState(new Date().getFullYear())\n  const [allDaysOfMonth, setAllDaysOfMonth] = useState([])\n  const [on, setOn] = useState(false);\n  const [prefillTime, setPrefillTime] = useState({})\n\n  useEffect(() => {\n    const daysOfMonth = () => {\n      let date = new Date(year, month, 1);\n      let days = [];\n      while (date.getMonth() === parseInt(month)) {\n        let day = moment(date).format('L')\n        let splitDate = day.split(\"00\")[0]\n        days.push(splitDate);\n        date.setDate(date.getDate() + 1);\n      }\n      setAllDaysOfMonth(days);\n    }\n    daysOfMonth(month, year)\n\n  }, [month, year]);\n\n  const handleOn = () => {\n    setOn(!on);\n  };\n\n  const preFillDates = (begin , end) => {\n  \n    setPrefillTime({\"timeIn\": begin, \"timeOut\": end})\n  }\n\n  const monthsOfYear = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  const yearsToCome = () => {\n    let currentYear = new Date().getFullYear()\n    return [...Array(2050 - currentYear + 1).keys()].map(i => i + currentYear);\n  }\n\n  return (\n    <div className=\"container\">\n      <button onClick={handleOn} style={{width:'100%'}} type=\"button\" className=\"btn btn-dark btn-lg btn-block\">Dark</button>\n      {on && <SideBar preFillDates={preFillDates}/>}\n      <h1>Time Sheet</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          <select onChange={(e) => setMonth(e.target.value)} className=\"form-select\" aria-label=\"Default select example\">\n            <option defaultValue>Select Month</option>\n            {monthsOfYear.map((month, index) => {\n              return <option key={month} name={month} value={index}>{month}</option>\n            })}\n          </select>\n        </div>\n        <div className=\"col\">\n          <select onChange={(e) => setYear(e.target.value)} className=\"form-select\" aria-label=\"Default select example\">\n            <option defaultValue>Select Year</option>\n            {yearsToCome().map(year => {\n              return <option key={year} name={year} value={year}>{year}</option>\n            })}\n          </select>\n        </div>\n      </div>\n      <Grid allDaysOfMonth={allDaysOfMonth} prefillTime={prefillTime}></Grid>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}