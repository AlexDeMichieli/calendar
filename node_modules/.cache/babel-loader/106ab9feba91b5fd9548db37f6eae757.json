{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/calendar-app/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = _ref => {\n  _s();\n\n  let {\n    allDaysOfMonth,\n    prefillTime\n  } = _ref;\n  const [timeIn, setTimeIn] = useState({});\n  const [timeOut, setTimeOut] = useState({}); //console.log(prefillTime)\n\n  useEffect(() => {\n    console.log(allDaysOfMonth); // allDaysOfMonth.map(item, index=>{\n    //   setTimeIn((state) => {\n    //     return {\n    //       ...state,\n    //       [index]: `${item} ${prefillTime.timeIn}`\n    //     };\n    //   });\n    // })\n    // const timeInSlots = document.getElementsByClassName(\"timeIn\")\n    // console.log('slots',timeInSlots)\n  }, []);\n  console.log(timeIn);\n\n  const computeHours = (timeIn, timeOut, cell) => {\n    let start = moment(timeIn[cell]);\n    let end = moment(timeOut[cell]);\n    let diff = end.diff(start);\n    let computedHours = moment.utc(diff).format('H.mm');\n    return computedHours;\n  };\n\n  const calculateTime = () => {\n    const total = [];\n    let sum = 0;\n    Object.keys(timeIn).forEach(function (key) {\n      let sumOfRowHours = computeHours(timeIn, timeOut, key);\n      total.push(parseFloat(sumOfRowHours));\n    });\n\n    for (let i = 0; i < total.length; i++) {\n      console.log(total[i]);\n      sum += total[i];\n    }\n\n    return sum;\n  };\n\n  const enterTimeIn = (e, cell, day, preFillDates) => {\n    setTimeIn(state => {\n      return { ...state,\n        [cell]: `${day} ${e.target.value}`\n      };\n    });\n  };\n\n  const enterTimeOut = (e, cell, day) => {\n    setTimeOut(state => {\n      return { ...state,\n        [cell]: `${day} ${e.target.value}`\n      };\n    });\n  };\n\n  const enterNotes = () => {};\n\n  const isWeekend = day => {\n    let currentDay = moment(day).format('LLLL');\n\n    if (currentDay.includes(\"Sat\") || currentDay.includes(\"Sun\")) {\n      return true;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"thead-dark\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Time In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Time Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: allDaysOfMonth && allDaysOfMonth.map((day, cell) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                background: isWeekend(day) ? 'grey' : 'white'\n              },\n              children: !isWeekend(day) && /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"timeIn\",\n                onChange: e => enterTimeIn(e, cell, day),\n                className: \"form-control\",\n                type: \"text\",\n                placeholder: \"Time In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 99\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                background: isWeekend(day) ? 'grey' : 'white'\n              },\n              children: !isWeekend(day) && /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"timeOut\",\n                onChange: e => enterTimeOut(e, cell, day),\n                className: \"form-control\",\n                type: \"text\",\n                placeholder: \"Time Out\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 99\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"hours\",\n              style: {\n                background: isWeekend(day) ? 'grey' : 'white'\n              },\n              children: !isWeekend(day) && computeHours(timeIn, timeOut, cell)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"notes\",\n              style: {\n                background: isWeekend(day) ? 'grey' : 'white'\n              },\n              children: !isWeekend(day) && /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => enterNotes(e, cell),\n                className: \"form-control\",\n                type: \"text\",\n                placeholder: \"Notes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 117\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)]\n          }, cell, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"text-center\",\n      children: [\"Sum: \", calculateTime()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Grid, \"uIlAdPv9DZhyAshp6CSX/aW1UQw=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","moment","Grid","allDaysOfMonth","prefillTime","timeIn","setTimeIn","timeOut","setTimeOut","console","log","computeHours","cell","start","end","diff","computedHours","utc","format","calculateTime","total","sum","Object","keys","forEach","key","sumOfRowHours","push","parseFloat","i","length","enterTimeIn","e","day","preFillDates","state","target","value","enterTimeOut","enterNotes","isWeekend","currentDay","includes","map","background"],"sources":["/Users/alexander/Desktop/calendar-app/src/components/Grid.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport moment from 'moment'\n\n\nconst Grid = ({ allDaysOfMonth, prefillTime }) => {\n\n  const [timeIn, setTimeIn] = useState({})\n  const [timeOut, setTimeOut] = useState({})\n  //console.log(prefillTime)\n\n\n  useEffect(() => {\n    console.log(allDaysOfMonth)\n\n    // allDaysOfMonth.map(item, index=>{\n    //   setTimeIn((state) => {\n    //     return {\n    //       ...state,\n    //       [index]: `${item} ${prefillTime.timeIn}`\n    //     };\n    //   });\n    // })\n    // const timeInSlots = document.getElementsByClassName(\"timeIn\")\n    // console.log('slots',timeInSlots)\n  }, []);\n  console.log(timeIn)\n\n\n  const computeHours = (timeIn, timeOut, cell) =>{\n    let start = moment(timeIn[cell]);\n    let end = moment(timeOut[cell]);\n    let diff = end.diff(start);\n    let computedHours = moment.utc(diff).format('H.mm')\n\n    return computedHours\n  }\n\n  const calculateTime = () => {\n    const total = []\n    let sum = 0\n\n    Object.keys(timeIn).forEach(function (key) {\n\n      let sumOfRowHours = computeHours(timeIn, timeOut, key)\n      total.push(parseFloat(sumOfRowHours))\n\n    });\n\n    for (let i = 0; i < total.length; i++) {\n      console.log(total[i])\n      sum += total[i]\n    }\n\n    return sum\n  }\n\n  const enterTimeIn = (e, cell, day, preFillDates) => {\n    setTimeIn((state) => {\n      return {\n        ...state,\n        [cell]: `${day} ${e.target.value}`\n      };\n    });\n  }\n\n  const enterTimeOut = (e, cell, day) => {\n    setTimeOut((state) => {\n      return {\n        ...state,\n        [cell]: `${day} ${e.target.value}`\n      };\n    });\n  }\n\n  const enterNotes = () => {\n\n  }\n\n\n  const isWeekend = (day) => {\n    let currentDay = moment(day).format('LLLL')\n    if (currentDay.includes(\"Sat\") || currentDay.includes(\"Sun\")) {\n      return true\n    }\n  }\n  return (\n    <div className='container'>\n      <table className=\"table\">\n        <thead className=\"thead-dark\">\n          <tr>\n            <th scope=\"col\">Month</th>\n            <th scope=\"col\">Time In</th>\n            <th scope=\"col\">Time Out</th>\n            <th scope=\"col\">Hours</th>\n            <th scope=\"col\">Notes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {allDaysOfMonth && allDaysOfMonth.map((day, cell) => {\n       \n            return (\n              <tr key={cell}>\n                <th scope=\"row\">{day}</th>\n                <td style={{ background: isWeekend(day) ? 'grey' : 'white' }}>{!isWeekend(day) && <input className='timeIn' onChange={(e) => enterTimeIn(e, cell, day)}  className=\"form-control\" type=\"text\" placeholder=\"Time In\"/>}</td>\n                <td style={{ background: isWeekend(day) ? 'grey' : 'white' }}>{!isWeekend(day) && <input className='timeOut'onChange={(e) => enterTimeOut(e, cell, day)} className=\"form-control\" type=\"text\" placeholder=\"Time Out\" />}</td>\n                <td className='hours' style={{ background: isWeekend(day) ? 'grey' : 'white' }}>{!isWeekend(day) && computeHours(timeIn, timeOut, cell)}</td>\n                <td className='notes' style={{ background: isWeekend(day) ? 'grey' : 'white' }}>{!isWeekend(day) && <input onChange={(e) => enterNotes(e, cell)} className=\"form-control\" type=\"text\" placeholder=\"Notes\" />}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <h4 className='text-center'>Sum: {calculateTime()}</h4>\n    </div>\n  )\n}\n\nexport default Grid"],"mappings":"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"},"metadata":{},"sourceType":"module"}